import Head from 'next/head';
import Image from 'next/image';
import axios from 'axios';
import { useState, useEffect } from 'react';
import { BsSearch } from 'react-icons/bs';
import Weather from './components/Weather';
import Loading from './components/Loading';

export default function Home() {
  const [city, setCity] = useState('');
  const [weather, setWeather] = useState({});
  const [loading, setLoading] = useState(false);

  const apiKey = process.env.NEXT_PUBLIC_WEATHER_KEY;
  const geolocationUrl = 'http://api.openweathermap.org/geo/1.0/reverse';
  const weatherUrl = `https://api.openweathermap.org/data/2.5/weather`;
  
  useEffect(() => {
    // Fetch weather data for the current location when the component mounts
    fetchWeatherByGeolocation();
  }, []);

  const fetchWeatherByGeolocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          getWeatherByCoordinates(latitude, longitude);
        },
        (error) => {
          console.error('Error getting geolocation:', error);
        }
      );
    } else {
      console.error('Geolocation is not supported by this browser.');
    }
  };

  const getWeatherByCoordinates = async (latitude, longitude) => {
    setLoading(true);

    try {
      const geolocationResponse = await axios.get(`${geolocationUrl}?lat=${latitude}&lon=${longitude}&limit=1&appid=${apiKey}`);
      const city = geolocationResponse.data[0].name;
      setCity(city);
      await fetchWeather(city);
    } catch (error) {
      console.error('Error fetching geolocation:', error);
      setLoading(false);
    }
  };

  const getWeather = async (e) => {
    e.preventDefault();
    await fetchWeather(city);
  };

  const fetchWeather = async (city) => {
    setLoading(true);

    try {
      const response = await axios.get(`${weatherUrl}?q=${city}&units=imperial&appid=${apiKey}`);
      setWeather(response.data);
    } catch (error) {
      console.error('Error fetching weather:', error);
    }

    setCity('');
    setLoading(false);
  };

  return (
    <div>
      <Head>
        <title>Weather - Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      {/* Overlay */}
      <div className='absolute top-0 left-0 right-0 bottom-0 bg-black/40 z-[1]' />
      {/* Background image */}
      <Image
        src='https://images.unsplash.com/photo-1569511735406-407c5884625c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80'
        fill
        className='object-cover'
        alt='weatherbackground'
      />

      {/* Search */}
      <div className='relative flex justify-between items-center max-w-[500px] w-full m-auto pt-4 px-4 text-white z-10'>
        <form
          onSubmit={getWeather}
          className='flex justify-between items-center w-full m-auto p-3 bg-transparent border border-gray-300 text-white rounded-2xl'
        >
          <div>
            <input
              onChange={(e) => setCity(e.target.value)}
              className='bg-transparent border-none text-white focus:outline-none text-2xl'
              type='text'
              placeholder='Search city'
              value={city}
            />
          </div>
          <button type='submit'>
            <BsSearch size={20} />
          </button>
        </form>
      </div>

      {/* Weather */}
      {loading ? <Loading /> : weather.main && <Weather data={weather} />}
    </div>
  );
}
